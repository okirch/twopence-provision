# -*- mode: ruby -*-
# vi: set ft=ruby :
# Template for Vagrantfile to provision a (SUSE based) silver image with selinux
# enablement

# TBD: based on the requirements, change how we provision.
# E.g. if the requirements include "suse-registration", provisioning should
# perform the SUSEConnect dance.
requires = Array[
	"@REQUIRES@",
]

Vagrant.configure("2") do |config|
  config.vm.box = "@IMAGE@"

  config.vm.provision "shell", inline: <<-SHELL
     os="@OS@"
     arch="@ARCH@"

     set -x
     case $os in
     SLES*-SP*)
	eval $(echo "$os" | sed 's:SLES\(.*\)-SP\(.*\):MAJOR=\1 MINOR=\2:')
	ibs_build_target=SLE_${MAJOR}_SP$MINOR
	sle_module_version=$MAJOR.$MINOR
	: ;;
     Leap-*.*)
	ibs_build_target="${os#Leap-}"
	: ;;
     *)
	echo "Unidentified OS %s - don't know what IBS build target to use" >&2
	exit 1;;
     esac

     case $os in
     SLE*)
	SUSEConnect -r "@INFO_REGISTRATION_REGCODE@" -e "@INFO_REGISTRATION_EMAIL@"
	SUSEConnect -p sle-module-desktop-applications/$sle_module_version/$arch
	SUSEConnect -p sle-module-development-tools/$sle_module_version/$arch
	SUSEConnect --list-extensions
	: ;;
     esac

     zypper -n in -y wget strace

     set -e

     rpm --import https://download.opensuse.org/repositories/openSUSE:infrastructure/$ibs_build_target/repodata/repomd.xml.key
     zypper -n addrepo https://download.opensuse.org/repositories/openSUSE:infrastructure/$ibs_build_target/openSUSE:infrastructure.repo
     zypper -n refresh
     zypper -n install ca-certificates-suse

     rpm --import https://download.suse.de/ibs/home:/okir:/selinux/$ibs_build_target/repodata/repomd.xml.key
     zypper -n addrepo https://download.suse.de/ibs/home:/okir:/selinux/$ibs_build_target selinux
     zypper -n update  -y --allow-vendor-change libselinux1 selinux-tools
     zypper -n install -y --allow-vendor-change checkpolicy policycoreutils restorecond
     zypper -n install -y --allow-vendor-change selinux-policy-targeted selinux-autorelabel

     echo "Updating kernel command line"
     for w in security=selinux selinux=1 enforcing=0 console=ttyS0; do
     	/usr/sbin/sysconf_addword /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT $w
     done
     /sbin/update-bootloader

     systemctl enable restorecond.service

     selinux-ready

     # Clear out any wicked state; that prevents clones of this node
     # to starts asking for DHCP leaves with the same duuids
     if [ -d /var/lib/wicked ]; then
       rm -f /var/lib/wicked/*
     fi
   SHELL

   config.vm.provision :shell do |shell|
     shell.privileged = true
     shell.inline = 'echo rebooting'
     shell.reboot = true
   end

  config.vm.provision "shell", inline: <<-SHELL
     selinux-ready
  SHELL
end
